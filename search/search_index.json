{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Feature Flag for Python","text":"<p>A modern and lightweight feature flag system for Python applications.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\u2705 Simple API for defining and checking flags</li> <li>\ud83d\udd01 Supports async and sync execution</li> <li>\ud83d\udce6 Easy integration with FastAPI or Flask</li> <li>\ud83d\udd12 Designed for production safety</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Install the package:</p> <p>```bash pip install feature-flag-python</p>"},{"location":"advanced/","title":"FastAPI Example Application","text":"<p>This example demonstrates how to use feature-flag-python in a FastAPI application.</p>"},{"location":"advanced/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Basic feature flags with <code>ais_enabled()</code></li> <li>A/B testing with <code>aget_experiment()</code> and <code>aget_variant()</code></li> <li>Decorators: <code>@afeature_flag</code> and <code>@aexperiment_variant</code></li> <li>Error handling and graceful degradation</li> <li>Health checks with feature flag status</li> </ul>"},{"location":"advanced/#running-the-example","title":"Running the Example","text":"<ol> <li> <p>Install dependencies: <pre><code>   pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Set up environment: <pre><code>cp .env.example .env\n# Edit .env with your feature flag server URL\n</code></pre></p> </li> <li> <p>Start the server: <pre><code>python main.py\n</code></pre></p> </li> </ol>"},{"location":"contributing/","title":"Contributing to LangGraph","text":"<p>Thank you for being interested in contributing to LangGraph!</p>"},{"location":"contributing/#general-guidelines","title":"General guidelines","text":"<p>Here are some things to keep in mind for all types of contributions:</p> <ul> <li>Follow the \"fork and pull request\" workflow.</li> <li>Fill out the checked-in pull request template when opening pull requests. Note related issues and tag relevant maintainers.</li> <li>Ensure your PR passes formatting, linting, and testing checks before requesting a review.</li> <li>If you would like comments or feedback, please open an issue or discussion and tag a maintainer.</li> <li>Backwards compatibility is key. Your changes must not be breaking, except in case of critical bug and security fixes.</li> <li>Look for duplicate PRs or issues that have already been opened before opening a new one.</li> <li>Keep scope as isolated as possible. As a general rule, your changes should not affect more than one package at a time.</li> </ul>"},{"location":"contributing/#bugfixes","title":"Bugfixes","text":"<p>For bug fixes, please open up an issue before proposing a fix to ensure the proposal properly addresses the underlying problem. In general, bug fixes should all have an accompanying unit test that fails before the fix.</p>"},{"location":"contributing/#new-features","title":"New features","text":"<p>For new features, please start a new discussion, where the maintainers will help with scoping out the necessary changes.</p>"},{"location":"contributing/#contribute-documentation","title":"Contribute Documentation","text":"<p>Documentation is a vital part of LangGraph. We welcome both new documentation for new features and community improvements to our current documentation. Please read the resources below before getting started:</p> <ul> <li>Documentation style guide</li> <li>Documentation setup</li> </ul>"},{"location":"contributing/#documentation-style-guide","title":"Documentation Style Guide","text":"<p>As LangGraph continues to grow, the surface area of documentation required to cover it continues to grow too. This page provides guidelines for anyone writing documentation for LangGraph, as well as some of our philosophies around organization and structure.</p>"},{"location":"contributing/#how-to-guides","title":"How-to guides","text":"<p>A how-to guide, as the name implies, demonstrates how to do something discrete and specific. It should assume that the user is already familiar with underlying concepts, and is trying to solve an immediate problem, but should still give some background or list the scenarios where the information contained within can be relevant. They can and should discuss alternatives if one approach may be better than another in certain cases.</p>"}]}